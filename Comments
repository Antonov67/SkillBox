Замечания и комментарии по проекту.

1. Рекомедовал бы сделать отступы в 4 пробела, это повысит читаемость кода.
2. Переменная Ip в классе Main начинается с заглавной I, остальные переменные - нет, лучше использовать также прописную i, чтобы была одинаковая стилистика кода.

Замечания по абстрактному классу Client:

1. Использование модификатора доступа public для абстрактного класса здесь, видимо, оправдано общим для всех типов клиентов методом getBallance(), содержание которого не меняется во всех классах. Если же его содержимое потенциально может стать разным, то лучше сделать метод абстрактным.
2. Методы moneyFromAccount() и moneyToAccount() по факту разные у каждого типа клиента, поэтому их нужно было сделать абстрактными и сделать свою реализацию для каждого клиента. Сейчас же методы фактически переопределяются, но нет аннотации @override. При таком подходе велика вероятность ошибки, можно забыть переопределить эти методы и будет использоваться родительское определение метода, что ошибочно.
Фактически, сейчас можно можно случайно стереть эти методы в классах наследниках и программа будет  работать, но результат будет неверным.
3. Определены три абстрактных класса getFizAccount, getUrAccount(), getIpAccount(), это обязывает их переопределять в каждом из клиентских классов, хотя отношение они к ним не имеют. Удобнее было бы сделать только один абстрактный класс, например с названием getAccount() и переопределить его в каждом из классов-наследников.
4. Убрать модификатор доступа public в конструкторе класса Client, конструктор нужен только для наследников, нет смысла его показывать в основной программе, иначе становится возможным сделать экземпляр класса Client, что логически бессмысленно и опасно,  вот так, например, можно разорить банк (переопределили метод moneyToAccount, кладем рубль, а по факту приходит на счет 1 000 000 и после мы спокойно снимаем этот миллион со счета):

         Client haker = new Client(0) {
            @Override
            public void moneyToAccount(double amount) {
                super.moneyToAccount(1000000);
            }

            @Override
            public double getFizAccount() {
                return 0;
            }

            @Override
            public double getUrAccount() {
                return 0;
            }

            @Override
            public double getIpAccount() {
                return 0;
            }
        };
        haker.moneyToAccount(1);
        System.out.println(haker.getBalance());
        haker.moneyFromAccount(1000000);
        System.out.println(haker.getBalance());

Так может сделать любой тип клиента, нужно запретить переопределять методы, то есть использовать модификатор final, иначе можно сделать так в основной программе (положить миллион под видом рубля):

        Client fiz = new FizAccount(0){
            @Override
            public void moneyToAccount(double amount) {
                super.moneyToAccount(1000000);
            }
        };
        fiz.moneyToAccount(1);

